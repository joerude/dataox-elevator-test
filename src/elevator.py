import time
from random import choice, randint
from passenger import Passenger


class Elevator:
    """
    max_floor/min_floor -> –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π/–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂
    –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º –ª–∏—Ñ—Ç–∞.
    direction=True => –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ñ—Ç–∞ –í–í–ï–†–•
    direction=False=> –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ñ—Ç–∞ –í–ù–ò–ó
    """

    def __init__(self, current_floor=1, capacity=5, total_floors=20):
        self.total_passengers = 0
        self.passengers_dict = {}
        self.direction = None
        self.total_floors = randint(5, total_floors)
        self.capacity = capacity
        self.current_floor = current_floor
        self.max_floor = self.total_floors
        self.min_floor = 1
        self.elevator_list = []
        self.generate_passengers()
        self.print_general_info()

        if self.current_floor > self.total_floors:
            raise ValueError(
                '–¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–∂–∞'
            )

    def passengers_of_current_floor(self):
        return self.passengers_dict.get(self.current_floor)

    def random_floor_to_passenger(self, floor):
        """ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —ç—Ç–∞–∂–∞, –æ—Ç–ª–∏—á–Ω–æ–≥–æ
        –æ—Ç —Ç–æ–≥–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–∞—Å—Å–∞–∂–∏—Ä.
        """
        return choice([i for i in range(1, self.total_floors) if i != floor])

    def generate_passengers(self):
        """ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
        –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 10 —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–∂–µ."""
        for floor in range(1, self.total_floors + 1):
            for passenger in range(randint(0, 10)):
                self.passengers_dict.setdefault(floor, []).append(
                    Passenger(
                        floor, self.random_floor_to_passenger(floor),
                    )
                )
                self.total_passengers += 1

    def passengers_exit_elevator(self):
        """
        –ü–∞—Å—Å–∞–∂–∏—Ä—ã –ø–æ–∫–∏–¥–∞—é—Ç –ª–∏—Ñ—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–≥–æ —ç—Ç–∞–∂–∞.
        –í—ã—à–µ–¥—à–µ–º—É –ø–∞—Å—Å–∞–∂–∏—Ä—É –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —ç—Ç–∞–∂.
        """
        for passenger in self.elevator_list:
            if passenger.to_floor == self.current_floor:
                print(f'‚ùå –ü–∞—Å—Å–∞–∂–∏—Ä {passenger} –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –ª–∏—Ñ—Ç–∞ ‚ùå')
                self.elevator_list = list(
                    filter(lambda a: a != passenger, self.elevator_list)
                )
                self.passengers_dict.setdefault(self.current_floor, []).append(
                    Passenger(
                        self.current_floor,
                        self.random_floor_to_passenger(self.current_floor)
                    )
                )

    def passengers_enter_elevator(self):
        """
        –ü–∞—Å—Å–∞–∂–∏—Ä—ã –∑–∞—Ö–æ–¥—è—Ç –ª–∏—Ñ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ª–∏—Ñ—Ç–∞.
        """
        if self.direction:
            if self.passengers_of_current_floor():
                print(
                    f'–ü–∞—Å—Å–∞–∂–∏—Ä—ã –Ω–∞ —ç—Ç–∞–∂–µ {self.passengers_of_current_floor()}'
                )
                for passenger in self.passengers_of_current_floor():
                    if (
                            passenger.to_floor > self.current_floor
                            and len(self.elevator_list) < self.capacity
                    ):
                        print(f'‚úÖ –ü–∞—Å—Å–∞–∂–∏—Ä {passenger} –≤—Ö–æ–¥–∏—Ç –≤ –ª–∏—Ñ—Ç ‚úÖ')
                        self.elevator_list.append(passenger)
                        self.passengers_dict[self.current_floor] = list(
                            filter(
                                lambda p: p != passenger,
                                self.passengers_dict[self.current_floor],
                            )
                        )

                if self.elevator_list:
                    self.max_floor = max(
                        [
                            passenger.to_floor
                            for passenger in self.elevator_list
                        ]
                    )

            else:
                print('–ü–ê–°–°–ê–ñ–ò–†–û–í –ù–ï–¢ –ù–ê –≠–¢–ê–ñ–ï')

        else:
            if self.passengers_of_current_floor():
                print(
                    f'–ü–∞—Å—Å–∞–∂–∏—Ä—ã –Ω–∞ —ç—Ç–∞–∂–µ {self.passengers_of_current_floor()}'
                )
                for passenger in self.passengers_of_current_floor():
                    if (
                            passenger.to_floor < self.current_floor
                            and len(self.elevator_list) < self.capacity
                    ):
                        print(f'‚úÖ –ü–∞—Å—Å–∞–∂–∏—Ä {passenger} –≤—Ö–æ–¥–∏—Ç –≤ –ª–∏—Ñ—Ç ‚úÖ')
                        self.elevator_list.append(passenger)
                        self.passengers_dict[self.current_floor] = list(
                            filter(
                                lambda p: p != passenger,
                                self.passengers_dict[self.current_floor],
                            )
                        )

                if self.elevator_list:
                    self.min_floor = min(
                        [p.to_floor for p in self.elevator_list]
                    )
            else:
                print('–ü–ê–°–°–ê–ñ–ò–†–û–í –ù–ï–¢ –ù–ê –≠–¢–ê–ñ–ï')

    def move_up(self):
        time.sleep(0.5)
        self.direction = True
        print(f'*** –≠–¢–ê–ñ {self.current_floor} ***')
        print('‚îÉ‚§ä  ', *self.elevator_list, '  ‚§ä‚îÉ')

        if self.current_floor <= self.total_floors:
            self.passengers_exit_elevator()
            self.passengers_enter_elevator()
        else:
            raise ValueError('–õ–ò–§–¢ –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –í–´–®–ï –ü–û–°–õ–ï–î–ù–ï–ì–û –≠–¢–ê–ñ–ê!')

        if self.current_floor != self.max_floor:
            self.current_floor += 1
        else:
            print(">>> –≠–¢–û –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –≠–¢–ê–ñ <<<")

        print('‚îÉ‚ü∞  ', *self.elevator_list, '  ‚ü∞‚îÉ')
        print()

    def move_down(self):
        time.sleep(0.5)
        self.direction = False
        print(f'*** –≠–¢–ê–ñ {self.current_floor} ***')
        print('‚îÉ‚§ã  ', *self.elevator_list, '  ‚§ã‚îÉ')

        if self.current_floor >= 1:
            self.passengers_exit_elevator()
            self.passengers_enter_elevator()
        else:
            raise ValueError('–õ–ò–§–¢ –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ù–ò–ñ–ï –ù–ê–ß–ê–õ–¨–ù–û–ì–û –≠–¢–ê–ñ–ê')

        print('‚îÉ‚§ã  ', *self.elevator_list, '  ‚§ã‚îÉ')
        if self.current_floor != self.min_floor:
            self.current_floor -= 1
        else:
            print(">>> –≠–¢–û –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –≠–¢–ê–ñ <<<")
        print()

    def move_up_to_max(self):
        """–õ–∏—Ñ—Ç –µ–¥–µ—Ç –≤–≤–µ—Ä—Ö –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —ç—Ç–∞–∂–∞"""
        while self.current_floor != self.max_floor:
            self.move_up()
        self.move_up()

    def move_down_to_min(self):
        """–õ–∏—Ñ—Ç –µ–¥–µ—Ç –≤–Ω–∏–∑ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —ç—Ç–∞–∂–∞"""
        while self.current_floor != self.min_floor:
            self.move_down()
        self.move_down()

    def print_general_info(self):
        """–í—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–∂–µ."""
        print('------------------------------------------------')
        print('–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:')
        print('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–¥–∞–Ω–∏—è –∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤...')
        print(f'–í—Å–µ–≥–æ –≤ –∑–¥–∞–Ω–∏–∏ {self.total_passengers} –ø–∞—Å—Å–∞–∂–∏—Ä(–∞/–æ–≤)')
        print(f'–ó–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {self.total_floors} —ç—Ç–∞–∂–µ–π')
        print(f'–¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂: {self.current_floor}')

        from collections import OrderedDict
        od_passengers = OrderedDict(sorted(self.passengers_dict.items()))
        for floor, passengers in od_passengers.items():
            if self.current_floor == i:
                print(f"{floor} —ç—Ç–∞–∂: –ø–∞—Å—Å–∞–∂–∏—Ä—ã - {passengers}  <----- –õ–ò–§–¢ –ó–î–ï–°–¨")
            else:
                print(f"{floor} —ç—Ç–∞–∂: –ø–∞—Å—Å–∞–∂–∏—Ä—ã - {passengers}")
        print('------------------------------------------------')

    def print_current_status(self):
        """–í—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ñ—Ç–µ."""
        print('------------------------------------------------')
        print('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ñ—Ç–µüõó:')
        print(f'–¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂: {self.current_floor}')
        print(
            f'–ù–∞ —ç—Ç–∞–∂–µ –≤—Å–µ–≥–æ {len(self.passengers_of_current_floor())} '
            f'–ø–∞—Å—Å–∞–∂–∏—Ä(–∞/–æ–≤)'
        )
        print(f'–í –ª–∏—Ñ—Ç–µ –≤—Å–µ–≥–æ {len(self.elevator_list)} –ø–∞—Å—Å–∞–∂–∏—Ä(–∞/–æ–≤)')
        print(f'–õ–∏—Ñ—Ç: {self.elevator_list}')
        print(
            f'–î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç –≤ –ª–∏—Ñ—Ç–µ: {self.capacity - len(self.elevator_list)}'
        )
        print(f'–ó–∞–Ω—è—Ç–æ –º–µ—Å—Ç –≤ –ª–∏—Ñ—Ç–µ: {len(self.elevator_list)}')
        print(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π(–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π) —ç—Ç–∞–∂: {self.max_floor}')
        print(f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ(–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π) —ç—Ç–∞–∂: {self.min_floor}')
        print('------------------------------------------------')
